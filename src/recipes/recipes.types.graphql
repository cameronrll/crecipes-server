
type Query {
  getAllRecipes: [Recipe]
  getRecipe(_id: String!): Recipe
}

type Mutation {
  createRecipe(createDto: RecipeCreate!): Recipe
  updateRecipe(_id: String!, updateDto: RecipeUpdate!): Recipe
  deleteRecipe(_id: String!): Recipe
  upVoteRecipe(_id: String!): Recipe
  downVoteRecipe(_id: String!): Recipe
}

type Subscription {
  subAllRecipes: RecipeSub
}

type Recipe {
  _id: String!
  creator: String!
  title: String!
  recipeDescription: String!
  ingredients: [RecipeIngredient!]!
  upVotes: Int!
  downVotes: Int!
  createdAt: String
  updatedAt: String
}

type RecipeIngredient {
  name: String!
  amount: String
  measurement: RecipeIngredientMeasurementType
}

type RecipeSub {
  recipe: Recipe!
  mutationStatus: MutationStatus!
}

enum RecipeIngredientMeasurementType {
  gms
  mls
  ls
  lbs
  cups
}

enum MutationStatus {
  CREATED
  UPDATED
  DELETED
}

input RecipeCreate {
  creator: String!
  title: String!
  recipeDescription: String!
  ingredients: [RecipeIngredientCreate!]!
}

input RecipeIngredientCreate {
  name: String!
  amount: String
  measurement: RecipeIngredientMeasurementType
}

input RecipeUpdate {
  title: String
  recipeDescription: String
  ingredients: [RecipeIngredientUpdate]
}

input RecipeIngredientUpdate {
  name: String
  amount: String
  measurement: RecipeIngredientMeasurementType
}
